#!/usr/bin/env node
process.title = 'gingerbread';

var Gingerbread = require('../'),
    Program = require('commander');

Program
  .version(require('../package.json').version)
  .option('--api-endpoint [api_endpoint]', 'Set API endpoint')
  .option('--api-version [api_version]', 'Set API version')
  .option('--api-key [api_key]', 'Set API key')
  .option('-l, --lang [lang]', 'Set language, currently support \'US\' only')
  .option('-v, --verbose', 'Verbose output')
  .usage('[options] <text ...>')
  .parse(process.argv);

if (process.stdin.isTTY) {
  Program.args.forEach(parseText);
} else {
  var texts = "";
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(d) {
    texts += d;
  });
  process.stdin.on('end', function() {
    texts = texts.replace(/\n$/, '');
    if (texts.length) {
      parseText(texts);
    }
  });
}

function parseText(text) {
  var options = {};

  if (Program.apiEndpoint) {
    options.apiEndpoint = Program.apiEndpoint;
  }

  if (Program.apiKey) {
    options.apiKey = Program.apiKey;
  }

  if (Program.apiVersion) {
    options.apiVersion = Program.apiVersion;
  }

  if (Program.lang) {
    options.lang = Program.lang;
  }

  Gingerbread(text, options, function (error, text, result, corrections) {
    if (error) {
      throw error;
    }

    var response = result + '\n';
    if (Program.verbose) {
      response = JSON.stringify({
        text: text,
        result: response,
        corrections: corrections,
      }, null, 2) + '\n';
    }

    process.stdout.write(response);
  });
}
